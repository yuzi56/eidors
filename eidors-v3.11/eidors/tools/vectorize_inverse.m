function [I,D] = vectorize_inverse(M);
% vectorize_inverse: fast computation of 3x3 and 4x4 inverses
% [Inv,Det] = vectorize_inverse(Mat);
% Mat is a 3x3xN or 4x4xN matrix
% Inv is inverse where Inv(:,:,k) = inv(Mat(:,:,k))
% Det is vector of determinants
 
% (C) 2022 A Adler. License GPL v2 or v3

if ischar(M) && strcmp(M,'UNIT_TEST'); do_unit_test; return; end

szM = size(M);
if szM(1) ~= szM(2)
    error('vectorize_inverse: matrix must be square');
end
switch szM(1)
   case 3; [I,D] = vectorize_3x3inv(M);
   case 4; [I,D] = vectorize_4x4inv(M);
   otherwise;
      error('Only 3x3 and 4x4 matrices possible')
end

function [I,D] = vectorize_3x3inv(M)
   a= M(1,1,:); b= M(1,2,:); c= M(1,3,:);
   d= M(2,1,:); e= M(2,2,:); f= M(2,3,:);
   g= M(3,1,:); h= M(3,2,:); i= M(3,3,:);

   D= a.*(e.*i-f.*h) - b.*(d.*i-f.*g) + c.*(d.*h-e.*g);
   if any(abs(D) < eps) 
      warning('Determinant close to zero');
   end

   I= (1./D).* ...
      [e.*i - f.*h, c.*h - b.*i, b.*f - c.*e;
       f.*g - d.*i, a.*i - c.*g, c.*d - a.*f;
       d.*h - e.*g, b.*g - a.*h, a.*e - b.*d];
   

function [I,D] = vectorize_4x4inv(M)
% Adapted from the Mesa3D implementation of
% gluInvertMatrix(const double m[16], double invOut[16])
% Available in Mesa3D (License in MIT)
%
% positions of 1 removed in rev6202


% Precalculate pieces to speed up
   M21 = M(2,1,:); M31 = M(3,1,:); M41 = M(4,1,:);
   M22 = M(2,2,:); M32 = M(3,2,:); M42 = M(4,2,:);
   M23 = M(2,3,:); M33 = M(3,3,:); M43 = M(4,3,:);
   M24 = M(2,4,:); M34 = M(3,4,:); M44 = M(4,4,:);

   I11= M22.*M33.*M44 - ...
             M22.*M43.*M34 - ...
             M23.*M32.*M44 + ...
             M23.*M42.*M34 + ...
             M24.*M32.*M43 - ...
             M24.*M42.*M33;

   I12=-M33.*M44 + ...
             M43.*M34 + ...
             M32.*M44 - ...
             M42.*M34 - ...
             M32.*M43 + ...
             M42.*M33;

   I13= M23.*M44 - ...
             M43.*M24 - ...
             M22.*M44 + ...
             M42.*M24 + ...
             M22.*M43 - ...
             M42.*M23;

   I14=-M23.*M34 + ...
             M33.*M24 + ...
             M22.*M34 - ...
             M32.*M24 - ...
             M22.*M33 + ...
             M32.*M23;

   I21=-M21.*M33.*M44 + ...
             M21.*M43.*M34 + ...
             M23.*M31.*M44 - ...
             M23.*M41.*M34 - ...
             M24.*M31.*M43 + ...
             M24.*M41.*M33;

   I22= M33.*M44 - ...
             M43.*M34 - ...
             M31.*M44 + ...
             M41.*M34 + ...
             M31.*M43 - ...
             M41.*M33;

   I23=-M23.*M44 + ...
             M43.*M24 + ...
             M21.*M44 - ...
             M41.*M24 - ...
             M21.*M43 + ...
             M41.*M23;

   I24= M23.*M34 - ...
             M33.*M24 - ...
             M21.*M34 + ...
             M31.*M24 + ...
             M21.*M33 - ...
             M31.*M23;

   I31= M21.*M32.*M44 - ...
             M21.*M42.*M34 - ...
             M22.*M31.*M44 + ...
             M22.*M41.*M34 + ...
             M24.*M31.*M42 - ...
             M24.*M41.*M32;

   I32=-M32.*M44 + ...
             M42.*M34 + ...
             M31.*M44 - ...
             M41.*M34 - ...
             M31.*M42 + ...
             M41.*M32;

   I33= M22.*M44 - ...
             M42.*M24 - ...
             M21.*M44 + ...
             M41.*M24 + ...
             M21.*M42 - ...
             M41.*M22;

   I34=-M22.*M34 + ...
             M32.*M24 + ...
             M21.*M34 - ...
             M31.*M24 - ...
             M21.*M32 + ...
             M31.*M22;

   I41=-M21.*M32.*M43 + ...
             M21.*M42.*M33 + ...
             M22.*M31.*M43 - ...
             M22.*M41.*M33 - ...
             M23.*M31.*M42 + ...
             M23.*M41.*M32;

   I42= M32.*M43 - ...
             M42.*M33 - ...
             M31.*M43 + ...
             M41.*M33 + ...
             M31.*M42 - ...
             M41.*M32;

   I43=-M22.*M43 + ...
             M42.*M23 + ...
             M21.*M43 - ...
             M41.*M23 - ...
             M21.*M42 + ...
             M41.*M22;

   I44= M22.*M33 - ...
             M32.*M23 - ...
             M21.*M33 + ...
             M31.*M23 + ...
             M21.*M32 - ...
             M31.*M22;

   D =      I11 + ...
       M21.*I12 + ...
       M31.*I13 + ...
       M41.*I14;

   if any(abs(D) < eps) 
      warning('Determinant close to zero');
   end

   I = bsxfun(@times,...
       [I11, I12, I13, I14;
        I22, I22, I23, I24;
        I32, I32, I33, I34;
        I42, I42, I43, I44], (1./D));






function do_unit_test
   M=reshape((1:16).^(0.5),4,4); M(1,:) = 1;
   M(2:end,:,:) = M(2:end,:,:) - ...
             mean(M(2:end,:,:),2);
   [I,D] = vectorize_4x4inv(M);
   iM = inv(M);
   unit_test_cmp('vectorize_4x4inv', ...
       I(:,2:end) ,iM(:,2:end),1e-09);
   unit_test_cmp('vectorize_4x4inv',D,det(M),1e-12);
   M=reshape((1:9).^(0.5),3,3); M(1,:) = 1;
   [I,D] = vectorize_3x3inv(M);
   unit_test_cmp('vectorize_3x3inv',I,inv(M),1e-12);
   unit_test_cmp('vectorize_3x3inv',D,det(M),1e-12);

