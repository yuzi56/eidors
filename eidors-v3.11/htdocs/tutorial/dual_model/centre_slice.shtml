

<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
   <head>
<title>EIDORS</title>
   <style type="text/css">
        body, td, th {
        font-family: Verdana, Helvetica, Arial, sans-serif;
        font-size:80%;
        }
        pre, tt {
        font-family:lucida console, FixedSys, Courier, Terminal, monospaced;
        font-size:100%;
        }
        pre {
        background-color: #E0F0FE;
        border-style: groove;
        border-color: black;
        border-width: 2px;
        }
   </style>

</head>

<body link="#800000"
      marginwidth=5 marginheight=5 topmargin=5 leftmargin=5 
      vlink="#400000" >
<table border="0" cellspacing="0" cellpadding="0">
<tr height="80"><td valign="middle">
<a href="http://www.eidors.org">
<img alt="Eidors-logo" src="../../eidors-logo.jpg"></a>&nbsp;&nbsp;&nbsp;&nbsp;
</td><td>
<h2>
    EIDORS:
    <small><i>Electrical Impedance Tomography and
    Diffuse Optical Tomography Reconstruction Software</i></small>
</h2>
</td></tr></table>
<table border="0"> <tr>
<td valign="top" width="100">
<a href="http://eidors3d.sf.net/" >EIDORS</a>
(<a href="http://www.sce.carleton.ca/faculty/adler/eidors/index.shtml"
    >mirror</a>)<br>
<a href="../../index.shtml"
>Main</a><br>
<a href="../../docs.shtml"
   >Documentation</a><br>
<a href="../../tutorial/tutorial.shtml"
   >Tutorials</a><br>

<a href="../../tutorial/image_reconst.shtml"
      >&minus; Image Reconst</a><br>
<a href="../../tutorial/data_structures.shtml"
      >&minus; Data Structures</a><br>
<a href="../../tutorial/application_examples.shtml"
      >&minus; Applications</a><br>
<a href="../../tutorial/netgen.shtml"
      >&minus; FEM Modelling</a><br>
<a href="../../tutorial/GREIT.shtml"
      >&minus; GREIT</a><br>
<a href="../../tutorial/old-tutorials.shtml"
      >&minus; Old tutorials</a><br>
<a href="../../tutorial/workshop/workshop.shtml"
      >&minus; <i>Workshop</i></a><br>

<a href="../../download.shtml"
   >Download</a><br>
<a href="../../data_contrib.shtml"
   >Contrib Data</a><br>
<a href="../../GREIT/index.shtml"
   >GREIT</a><br>
<a href="../../doc/index.html"
   >Browse Docs</a><br>
<a href="https://sourceforge.net/p/eidors3d/code/HEAD/tree/trunk/"
   >Browse SVN</a><br>
<hr>
<a href="../../news.shtml">News</a><br>
<a href="https://lists.sourceforge.net/lists/listinfo/eidors3d-help"
   >Mailing list</a><br>
(<a href="https://sourceforge.net/mailarchive/forum.php?forum_name=eidors3d-help"
   >archive</a>)<br>
<a href="../../faq.shtml">FAQ</a><br>
<a href="../../programming/programming.shtml">Developer</a><br>



&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
<!-- EIDORS Navigation sidebar
     $Id: nav-sidebar.shtml 6533 2022-12-31 00:53:54Z aadler $
  -->
<p>&nbsp;
<p>
<small>Hosted by</small><br>
<a  href="http://sourceforge.net/projects/eidors3d">
   <img src="http://sourceforge.net/sflogo.php?group_id=100454&type=4"
         border="0" alt="SourceForge.net Logo"  />
</a>
</td><td>&nbsp;</td><td valign="top">




<h2> 
Dual Models to reconstruct a slice of a volume
</h2>

A common use of dual models is to allow the forward
model to represent the entire space, while the
reconstruction model represents a slice through
the volume at the place of interest. 
<p>
To simulate this, we simulate a ball moving in
a helical path on a fine netgen model.
<pre>
% Simulate Moving Ball - Helix $Id: centre_slice01.m 2666 2011-07-12 20:41:02Z aadler $

% get ng_mdl_16x2_vfine from data_contrib section of web page
n_sims= 20;
stim = mk_stim_patterns(16,2,'{ad}','{ad}',{},1);
fmdl = mk_library_model('cylinder_16x2el_vfine');
fmdl.stimulation = stim;
[vh,vi,xyzr_pt]= simulate_3d_movement( n_sims, fmdl);

clf; show_fem(fmdl)
crop_model(gca, inline('x-z<-15','x','y','z'))
view(-23,14)

hold on
[xs,ys,zs]=sphere(10);
for i=1:n_sims
   xp=xyzr_pt(1,i); yp=xyzr_pt(2,i);
   zp=xyzr_pt(3,i); rp=xyzr_pt(4,i);
   hh=surf(rp*xs+xp, rp*ys+yp, rp*zs+zp);
   set(hh,'EdgeColor',[.4,0,.4],'FaceColor',[.2,0,.2]);
end
hold off

print_convert centre_slice01a.png '-density 100'

</pre>

<center>
<img src = "http://eidors3d.sourceforge.net/tutorial/dual_model/centre_slice01a.png">
<br><i> Figure:</i>
Netgen model of a 2&times;16 electrode tank. The
positions of the simulated conductive target moving in
a helical path are shown in purple.
</center>

<h3> Create reconstruction model </h3>

In order to reconstruct the image, we use a dual
model where the 2D coarse model is mapped to only
a layer of elements in the fine model.

<pre>
% 2D solver $Id: centre_slice02.m 2666 2011-07-12 20:41:02Z aadler $

% Create and show inverse solver
imdl = mk_common_model('b3cr',[16,2]);

f_mdl = mk_library_model('cylinder_16x2el_coarse');
f_mdl.stimulation = stim;
imdl.fwd_model = f_mdl;

% Create coarse model
imdl2d= mk_common_model('b2c2',16);
c_mdl= imdl2d.fwd_model;

% Show fine model
show_fem(f_mdl);
crop_model(gca, inline('x-z<-15','x','y','z'))
view(-23,10)

scl= 15; % scale difference between c_mdl and f_mdl
c_els= c_mdl.elems;
c_ndsx= c_mdl.nodes(:,1)*scl;
c_ndsy= c_mdl.nodes(:,2)*scl;
c_ndsz= 0*c_ndsx; 

layersep= .3;
layerhig= .1;
hold on
% Lower resonstruction layer
hh= trimesh(c_els, c_ndsx, c_ndsy, c_ndsz+(1-layersep)*scl);
set(hh, 'EdgeColor', [1,0,0]);
hh= trimesh(c_els, c_ndsx, c_ndsy, c_ndsz+(1-layersep-layerhig)*scl);
set(hh, 'EdgeColor', [.3,.3,.3]);
hh= trimesh(c_els, c_ndsx, c_ndsy, c_ndsz+(1-layersep+layerhig)*scl);
set(hh, 'EdgeColor', [.3,.3,.3]);

% Upper resonstruction layer
hh= trimesh(c_els, c_ndsx, c_ndsy, c_ndsz+(1+layersep)*scl);
set(hh, 'EdgeColor', [0,0,1]);
hh= trimesh(c_els, c_ndsx, c_ndsy, c_ndsz+(1+layersep-layerhig)*scl);
set(hh, 'EdgeColor', [.3,.3,.3]);
hh= trimesh(c_els, c_ndsx, c_ndsy, c_ndsz+(1+layersep+layerhig)*scl);
set(hh, 'EdgeColor', [.3,.3,.3]);

for i=1:n_sims
   xp=xyzr_pt(1,i); yp=xyzr_pt(2,i);
   zp=xyzr_pt(3,i); rp=xyzr_pt(4,i);
   hh=surf(rp*xs+xp, rp*ys+yp, rp*zs+zp);
   set(hh,'EdgeColor',[.4,0,.4]);
end

hold off;

print_convert centre_slice02a.png '-density 100'

</pre>

<center>
<img src = "http://eidors3d.sourceforge.net/tutorial/dual_model/centre_slice02a.png">
<br><i> Figure:</i>
Netgen model of a 2&times;16 electrode tank. The
positions of the simulated conductive target moving in
a helical path are shown in purple.
The 3D fine model is shown (cropped). The upper (blue) 
and lower (red) layers corresponding to the 
geometry of the coarse model are shown. The <i>z</i>
direction limits of the coarse model are shown in grey.
</center>

<h3> Image reconstructions </h3>

First, we create a coarse model which represents
the entire depth in <i>z</i> (ie. like the 2&frac12;D model).
Images reconstructed with this model have more artefacts,
but show the reconstructed target at all depths.

<pre>
% 2D solver $Id: centre_slice03.m 4839 2015-03-30 07:44:50Z aadler $


% Set coarse as reconstruction model
imdl.rec_model= c_mdl;
c_mdl.mk_coarse_fine_mapping.f2c_offset = [0,0,scl];
c_mdl.mk_coarse_fine_mapping.f2c_project = (1/scl)*speye(3);
c_mdl.mk_coarse_fine_mapping.z_depth = inf;
c2f= mk_coarse_fine_mapping( f_mdl, c_mdl);
imdl.fwd_model.coarse2fine = c2f;
imdl.RtR_prior = @prior_gaussian_HPF;
imdl.solve = @inv_solve_diff_GN_one_step;
imdl.hyperparameter.value= 0.1;

imgc= inv_solve(imdl, vh, vi);

clf; show_slices(imgc);
print_convert centre_slice04a.png '-density 75';

</pre>

Next, we create coarse models which represent
the a thin <i>0.1&times;scale</i> slice in <i>z</i>.
These images display a targets in the space
from the original volume.

<pre>
% 2D solver $Id: centre_slice04.m 4839 2015-03-30 07:44:50Z aadler $

imdl.hyperparameter.value= 0.05;

c_mdl.mk_coarse_fine_mapping.f2c_offset = [0,0,(1-.3)*scl];
c_mdl.mk_coarse_fine_mapping.z_depth = 0.1;
c2f= mk_coarse_fine_mapping( f_mdl, c_mdl);
imdl.fwd_model.coarse2fine = c2f;
imgc0= inv_solve(imdl, vh, vi);
% Show image of reconstruction in upper planes
show_slices(imgc0);
print_convert centre_slice04b.png '-density 75';

c_mdl.mk_coarse_fine_mapping.f2c_offset = [0,0,(1+.3)*scl];
c_mdl.mk_coarse_fine_mapping.z_depth = 0.1;
c2f= mk_coarse_fine_mapping( f_mdl, c_mdl);
imdl.fwd_model.coarse2fine = c2f;
imgc1= inv_solve(imdl, vh, vi);

% Show image of reconstruction in lower planes
show_slices(imgc1);
print_convert centre_slice04c.png '-density 75';

</pre>



<center>
<img src = "http://eidors3d.sourceforge.net/tutorial/dual_model/centre_slice04a.png">
<img src="centre_slice04b.png">
<img src="centre_slice04c.png">
<br><i> Figure:</i>
Reconstructed images of a target moving in a helical
pattern using difference coarse models
<i>Left</i>  coarse model with z<sub>depth</sub>=&infin;
<i>Centre</i>coarse model with z<sub>depth</sub>=0.1&times;scale at upper position
<i>Right</i> coarse model with z<sub>depth</sub>=0.1&times;scale at lower positions
</center>

<h3> Simpler reconstruction model </h3>

The previous model requires lots of time an memory
to calculate the Jacobian for the reconstruction,
because of the large number of FEMs.
To speed up the calcualion, we use a simpler 
fine model.

<pre>
% 2D solver $Id: centre_slice05.m 2673 2011-07-13 06:57:41Z aadler $

% Create and show inverse solver
imdl = mk_common_model('b3cr',[16,2]);
f_mdl= imdl.fwd_model;

% Create coarse model
imdl2d= mk_common_model('b2c2',16);
c_mdl= imdl2d.fwd_model;

% Show fine model
clf;show_fem(f_mdl);
crop_model(gca, inline('x-z<-.5','x','y','z'))
view(-23,10)

scl= 1; % scale difference between c_mdl and f_mdl
c_els= c_mdl.elems;
c_ndsx= c_mdl.nodes(:,1)*scl;
c_ndsy= c_mdl.nodes(:,2)*scl;
c_ndsz= 0*c_ndsx; 

layersep= .3;
layerhig= .1;
hold on
% Lower resonstruction layer
hh= trimesh(c_els, c_ndsx, c_ndsy, c_ndsz+(-layersep)*scl);
set(hh, 'EdgeColor', [1,0,0]);
hh= trimesh(c_els, c_ndsx, c_ndsy, c_ndsz+(-layersep-layerhig)*scl);
set(hh, 'EdgeColor', [.3,.3,.3]);
hh= trimesh(c_els, c_ndsx, c_ndsy, c_ndsz+(-layersep+layerhig)*scl);
set(hh, 'EdgeColor', [.3,.3,.3]);

% Upper resonstruction layer
hh= trimesh(c_els, c_ndsx, c_ndsy, c_ndsz+(+layersep)*scl);
set(hh, 'EdgeColor', [0,0,1]);
hh= trimesh(c_els, c_ndsx, c_ndsy, c_ndsz+(+layersep-layerhig)*scl);
set(hh, 'EdgeColor', [.3,.3,.3]);
hh= trimesh(c_els, c_ndsx, c_ndsy, c_ndsz+(+layersep+layerhig)*scl);
set(hh, 'EdgeColor', [.3,.3,.3]);

[xs,ys,zs]=sphere(10);
for i=1:size(xyzr_pt,2)
   xp=xyzr_pt(1,i)/15;   yp=xyzr_pt(2,i)/15;
   zp=xyzr_pt(3,i)/15-1; rp=xyzr_pt(4,i)/15;
   hh=surf(rp*xs+xp, rp*ys+yp, rp*zs+zp);
   set(hh,'EdgeColor',[.4,0,.4]);
end

hold off;

print_convert centre_slice05a.png '-density 100';

</pre>

<center>
<img src = "http://eidors3d.sourceforge.net/tutorial/dual_model/centre_slice05a.png">
<br><i> Figure:</i>
Simple extruded model of a 2&times;16 electrode tank. The
positions of the simulated conductive target moving in
a helical path are shown in purple.
The 3D fine model is shown (cropped). The upper (blue) 
and lower (red) layers corresponding to the 
geometry of the coarse model are shown. The <i>z</i>
direction limits of the coarse model are shown in grey.
</center>

<h3> Image reconstructions </h3>

We reconstruct with coarse models with
a) the entire depth in <i>z</i> (ie. like the 2&frac12;D model).
Images reconstructed with this model have more artefacts,
b) we create coarse models which represent
the a thin <i>0.1&times;scale</i> slice in <i>z</i>.
These images display a targets in the space
from the original volume.

<pre>
% 2D solver $Id: centre_slice06.m 4839 2015-03-30 07:44:50Z aadler $

% Set coarse as reconstruction model
imdl.rec_model= c_mdl;
c2f= mk_coarse_fine_mapping( f_mdl, c_mdl);
imdl.fwd_model.coarse2fine = c2f;
imdl.RtR_prior = @prior_gaussian_HPF;
imdl.solve = @inv_solve_diff_GN_one_step;
imdl.hyperparameter.value= 0.2;

imgc= inv_solve(imdl, vh, vi);
clf; show_slices(imgc);
print_convert centre_slice06a.png '-density 75';

c_mdl.mk_coarse_fine_mapping.f2c_offset = [0,0,-.3];
c_mdl.mk_coarse_fine_mapping.z_depth = 0.1;
c2f= mk_coarse_fine_mapping( f_mdl, c_mdl);
imdl.fwd_model.coarse2fine = c2f;
imgc0= inv_solve(imdl, vh, vi);

imgc0= inv_solve(imdl, vh, vi);
show_slices(imgc0);
print_convert centre_slice06b.png '-density 75';

c_mdl.mk_coarse_fine_mapping.f2c_offset = [0,0,.3];
c_mdl.mk_coarse_fine_mapping.z_depth = 0.1;
c2f= mk_coarse_fine_mapping( f_mdl, c_mdl);
imdl.fwd_model.coarse2fine = c2f;

imgc1= inv_solve(imdl, vh, vi);
show_slices(imgc1);
print_convert centre_slice06c.png '-density 75';

</pre>


<center>
<img src = "http://eidors3d.sourceforge.net/tutorial/dual_model/centre_slice06a.png">
<img src="centre_slice06b.png">
<img src="centre_slice06c.png">
<br><i> Figure:</i>
Reconstructed images of a target moving in a helical
pattern using difference coarse models
<i>Left</i>  coarse model with z<sub>depth</sub>=&infin;
<i>Centre</i>coarse model with z<sub>depth</sub>=0.1&times;scale at upper position
<i>Right</i> coarse model with z<sub>depth</sub>=0.1&times;scale at lower positions
</center>





</td></tr></table>
<p>
<small>
    Last Modified: $Date: 2017-02-28 13:12:08 -0500 (Tue, 28 Feb 2017) $ by $Author: aadler $
</small>
</BODY></HTML>
<!--
      -->
