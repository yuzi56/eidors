

<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
   <head>
<title>EIDORS</title>
   <style type="text/css">
        body, td, th {
        font-family: Verdana, Helvetica, Arial, sans-serif;
        font-size:80%;
        }
        pre, tt {
        font-family:lucida console, FixedSys, Courier, Terminal, monospaced;
        font-size:100%;
        }
        pre {
        background-color: #E0F0FE;
        border-style: groove;
        border-color: black;
        border-width: 2px;
        }
   </style>

</head>

<body link="#800000"
      marginwidth=5 marginheight=5 topmargin=5 leftmargin=5 
      vlink="#400000" >
<table border="0" cellspacing="0" cellpadding="0">
<tr height="80"><td valign="middle">
<a href="http://www.eidors.org">
<img alt="Eidors-logo" src="../../eidors-logo.jpg"></a>&nbsp;&nbsp;&nbsp;&nbsp;
</td><td>
<h2>
    EIDORS:
    <small><i>Electrical Impedance Tomography and
    Diffuse Optical Tomography Reconstruction Software</i></small>
</h2>
</td></tr></table>
<table border="0"> <tr>
<td valign="top" width="100">
<a href="http://eidors3d.sf.net/" >EIDORS</a>
(<a href="http://www.sce.carleton.ca/faculty/adler/eidors/index.shtml"
    >mirror</a>)<br>
<a href="../../index.shtml"
>Main</a><br>
<a href="../../docs.shtml"
   >Documentation</a><br>
<a href="../../tutorial/tutorial.shtml"
   >Tutorials</a><br>

<a href="../../tutorial/image_reconst.shtml"
      >&minus; Image Reconst</a><br>
<a href="../../tutorial/data_structures.shtml"
      >&minus; Data Structures</a><br>
<a href="../../tutorial/application_examples.shtml"
      >&minus; Applications</a><br>
<a href="../../tutorial/netgen.shtml"
      >&minus; FEM Modelling</a><br>
<a href="../../tutorial/GREIT.shtml"
      >&minus; GREIT</a><br>
<a href="../../tutorial/old-tutorials.shtml"
      >&minus; Old tutorials</a><br>
<a href="../../tutorial/workshop/workshop.shtml"
      >&minus; <i>Workshop</i></a><br>

<a href="../../download.shtml"
   >Download</a><br>
<a href="../../data_contrib.shtml"
   >Contrib Data</a><br>
<a href="../../GREIT/index.shtml"
   >GREIT</a><br>
<a href="../../doc/index.html"
   >Browse Docs</a><br>
<a href="https://sourceforge.net/p/eidors3d/code/HEAD/tree/trunk/"
   >Browse SVN</a><br>
<hr>
<a href="../../news.shtml">News</a><br>
<a href="https://lists.sourceforge.net/lists/listinfo/eidors3d-help"
   >Mailing list</a><br>
(<a href="https://sourceforge.net/mailarchive/forum.php?forum_name=eidors3d-help"
   >archive</a>)<br>
<a href="../../faq.shtml">FAQ</a><br>
<a href="../../programming/programming.shtml">Developer</a><br>



&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
<!-- EIDORS Navigation sidebar
     $Id: nav-sidebar.shtml 6533 2022-12-31 00:53:54Z aadler $
  -->
<p>&nbsp;
<p>
<small>Hosted by</small><br>
<a  href="http://sourceforge.net/projects/eidors3d">
   <img src="http://sourceforge.net/sflogo.php?group_id=100454&type=4"
         border="0" alt="SourceForge.net Logo"  />
</a>
</td><td>&nbsp;</td><td valign="top">




<h2> 
GREIT software framework
</h2>

The GREIT software framework is designed to simplify
the analysis and allow contributions from different
EIT software code bases. As shown, there are four
steps
<ol start="0">
<li> <b>Construction of the forward model</b> (<tt>fwd_model</tt>).
     This is saved to a file, and must inlude the 
     main EIDORS structures:
   <br>&minus; fwd_model.elems (N<sub>elems</sub>&times;4)
        - definition of simplices
   <br>&minus; fwd_model.nodes (N<sub>nodes</sub>&times;3)
        - definition of vertices
   <br>&minus; fwd_model.electrode (N<sub>electrodes</sub>)
        - normally 16, 12 or 8
   <br>&minus; fwd_model.electrode(<i>idx</i>).nodes
        - nodes in the electrode
   <br>&minus; fwd_model.electrode(<i>idx</i>).z_contact
        - contact impedance for Complete electrode model

<li> <b>Calculation of Jacobian </b>
    <br> based on <tt>fwd_model</tt> and a reconstruction
         model using a 32&times;32 grid which covers the
         <i>x</i>, <i>y</i> space of the <tt>fwd_model</tt>.
    <br> <i>Parameter</i> values include the height of the
         reconstruction grid

<li> <b>Calculation of the image prior</b>
    <br> no parameters are required, typically, except for
         NOSER type priors which require calculation 
         of the Jacobian.

<li> <b>Calculation of the reconstruction matrix</b>
     <br> This step involves the inverse step, and 
         calcualtion of the hyperparameter, via
         an explicit hyperparameter (&lambda;) or 
         via a scheme such as the truncated SVD.

<li> <b>Evaluation of the reconstruction matrix</b>
     <br> Each different evaluation <i>figure of metrit</i>
          is calculated from the reconstruction matrix
          using a different hyperparameter.

</ol>

<center>
<img src="framework.png">
<br><i> Figure:</i>
Conceptual framework for GREIT software
</center>

<h3>Step 0: forward model</h3>

<pre>
% fwd_model $Id: framework00.m 2684 2011-07-13 08:43:58Z aadler $

fmdl = mk_library_model('cylinder_16x1el_fine');
fmdl.stimulation = mk_stim_patterns(16,1,'{ad}','{ad}',{},1);

subplot(121)
show_fem(fmdl);
view([-5 28]);
crop_model(gca, inline('x+2*z>20','x','y','z'))

subplot(122)
show_fem(fmdl);
view(0,0);
crop_model(gca, inline('y>-10','x','y','z'))
set(gca,'Xlim',[-4,4],'Zlim',[-2,2]+5);

print_convert framework00a.png

</pre>

<center>
<img src = "http://eidors3d.sourceforge.net/tutorial/GREIT-algorithm/framework00a.png">
<br><i> Figure:</i>
FEM model of a ring of electrodes as well.
<i>Right</i> Refinement of mesh near the electrode.
</center>


<h3>Step 1: calculate Jacobian</h3>

Create a 32&times;32 pixel grid mesh for the
inverse model, and show the correspondence between 
it and the find forward model.
<pre>
% fwd_model $Id: framework01.m 2684 2011-07-13 08:43:58Z aadler $

fmdl = mk_library_model('cylinder_16x1el_fine');

pixel_grid= 32;
nodes= fmdl.nodes;
xyzmin= min(nodes,[],1);  xyzmax= max(nodes,[],1);
xvec= linspace( xyzmin(1), xyzmax(1), pixel_grid+1);
yvec= linspace( xyzmin(2), xyzmax(2), pixel_grid+1);
zvec= [0.6*xyzmin(3)+0.4*xyzmax(3), 0.4*xyzmin(3)+0.6*xyzmax(3)];

% CALCULATE MODEL CORRESPONDENCES
[rmdl,c2f] = mk_grid_model(fmdl, xvec, yvec, zvec);


% SHOW MODEL CORRESPONDENCE

clf;
show_fem(fmdl);  % fine model
crop_model(gca, inline('x-z<-8','x','y','z'))
hold on
hh=show_fem(rmdl); set(hh,'EdgeColor',[0,0,1]);
hold off

view(-47,18); 

print_convert framework01a.png

</pre>

<center>
<img src = "http://eidors3d.sourceforge.net/tutorial/GREIT-algorithm/framework01a.png">
<br><i> Figure:</i>
3D fine cylindrical mesh and 32&times;32 reconstruction grid
</center>

Calculate a Jacobian for a fine 3D mesh mapped onto

<pre>
% fwd_model $Id: framework02.m 3273 2012-06-30 18:00:35Z aadler $

% CALCULATE JACOBIAN AND SAVE IT

img= mk_image(fmdl, 1);
img.fwd_model.coarse2fine = c2f;
img.rec_model= rmdl;

% ADJACENT STIMULATION PATTERNS
img.fwd_model.stimulation= mk_stim_patterns(16, 1, ...
             [0,1],[0,1], {'do_redundant', 'no_meas_current'}, 1);

% SOLVERS
img.fwd_model.system_mat= @system_mat_1st_order;
img.fwd_model.solve=      @fwd_solve_1st_order;
img.fwd_model.jacobian=   @jacobian_adjoint;

J= calc_jacobian(img);

map = reshape(sum(c2f,1),pixel_grid,pixel_grid)>0;
save GREIT_Jacobian_ng_mdl_fine J map

</pre>

<h3>Step 2: calculate image prior</h3>

Here we use a NOSER type prior with each 
diagonal element equal to
 &radic;[<b>J</b><sup>T</sup><b>J</b>]<sub>i,i</sub>.
The &radic; is based on our experience that
a power of zero pushes artefacts to the boundary, while
a power of one  pushes artefacts to the centre.
<pre>
% image prior $Id: framework03.m 1545 2008-07-26 17:33:46Z aadler $
load GREIT_Jacobian_ng_mdl_fine J map

% Remove space outside FEM model
J= J(:,map);
% inefficient code - but for clarity
diagJtJ = diag(J'*J) .^ (0.7);

R= spdiags( diagJtJ,0, length(diagJtJ), length(diagJtJ));

save ImagePrior_diag_JtJ R

</pre>

<h3>Step 3: calculate reconstruction matrix </h3>

<pre>
% reconst $Id: framework04.m 1544 2008-07-26 17:23:52Z aadler $
load ImagePrior_diag_JtJ R
load GREIT_Jacobian_ng_mdl_fine J map

RM = zeros(size(J'));
J = J(:,map);

hp = .3;

RM(map,:)= (J'*J + hp^2*R)\J';

save RM_framework_example RM map

</pre>

<h3>Step 4: test reconstruction matrix</h3>

To test this example reconstruction matrix, we use
test data using the EIT system from IIRC, (KHU: Korea).
A non-conductive object is moved in a circle in a saline
tank. (Note this this example specifically does not
use the EIDORS imaging functions of colour mapping, showing
   that the GREIT code is functionally separate from EIDORS) 

<pre>
% Test RM $Id: framework05.m 3846 2013-04-16 16:24:32Z aadler $

% EXCLUDE MEASURES AT ELECTRODES
[x,y]= meshgrid(1:16,1:16);
idx= abs(x-y)>1 & abs(x-y)<15;

% LOAD SOME TEST DATA
load iirc_data_2006
v_reference= - real(v_reference(idx,:));
v_rotate   = - real(v_rotate(idx,:));

load RM_framework_example RM map;
clear imgs;for k=1:4;
   dv = v_rotate(:,k*2) - v_reference;
   img = reshape( RM*dv, 32,32); % reconstruction
   img(~map) = NaN;              % background
   imgs(:,:,k) = img;
end

imagesc(reshape(imgs,32,4*32))
axis off; axis equal; colormap(gray(256))
print_convert framework05a.png '-density 75'

</pre>

<center>
<img src="framework05a.png">
<br><i> Figure:</i>
Images of a non-conductive object moving in a tank.
</center>


</td></tr></table>
<p>
<small>
    Last Modified: $Date: 2017-02-28 13:12:08 -0500 (Tue, 28 Feb 2017) $ by $Author: aadler $
</small>
</BODY></HTML>
<!--
      -->
